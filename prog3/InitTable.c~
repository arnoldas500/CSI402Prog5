/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
- struct database* initialize(FILE* config)
- open config file
- open each schema/data file
- construct the database in memory
-executequeries.c
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "structs.h"

struct row * rowConfig(FILE *, int, int **, char **);
struct attribute * attConfig(int , char *);
struct table * tableCongif(FILE *, char *);


struct table * tableCongif(FILE * configFiles, char * tableNames){
  puts("inside tableconfig");
    int num, totalRowBytes, i, j;
    num = totalRowBytes = i = j = 0;
    int numCols, numRows, rowSize;
    numCols=numRows=rowSize=0;
    char ** columnNames;
    char ** columnTypes; //datatypes
    char * dataName; //used for sprintf
    int ** calledBytes;
    struct row ** rowArray;
    fscanf(configFiles, "%d", &num);
  //  struct attribute ** newAttribute;
  //  newAttribute = (struct attribute **) malloc(sizeof(struct attribute*));
    struct table * tableArray = (struct table *) malloc (sizeof(struct table));
    columnNames = (char**) malloc (sizeof(char*)*num);
    for(i=0; i< num; i++){
        columnNames[i] = (char*)malloc(sizeof(char)*16);
    }
    columnTypes = (char**) malloc (sizeof(char*)*num);
    for(i=0; i< num; i++){
        columnTypes[i] = (char*)malloc(sizeof(char)*16);
    }
    calledBytes = (int**) malloc (sizeof(int*)* num);
    for(i=0; i< num; i++){
        calledBytes[i] = (int*)malloc(sizeof(int));
    }
    fflush(stdout);
    puts("after all mallocs");
 fflush(stdout);
   
    
    for(i=0; num>i ; i++){
    fscanf(configFiles, "%s %s %d", columnNames[i], columnTypes[i],calledBytes[i]);
    totalRowBytes += *(calledBytes[i]);
    }

    FILE *dataFile;
    fflush(stdout);
    puts("before running fopen");
    dataName = malloc(strlen(tableNames)+7);
    sprintf(dataName, "%s.data", tableNames);
    dataFile= fopen(dataName, "r");
    //dataFile = fopen(strcat(tableNames,".data"), "r");
    fflush(stdout);
    puts("after running fopen");
    //configFiles
    fseek(dataFile,0,SEEK_END);
    numRows = (ftell(dataFile))/totalRowBytes;
    // struct row **tableRow = (struct ** row) malloc(sizeof(struct *row)*numRows);

    rowArray = (struct row**) malloc(sizeof(struct row*)*numRows); //using a double ptr to make
                                                    //an array of array 
puts("right before for loop");                                                    //or an array of row structs
    for(i=0; num>i ; i++){
      fflush(stdout);
      puts("right before rowconfig");
        rowArray[i] = rowConfig(dataFile, numCols, calledBytes, columnTypes);
	fflush(stdout);
	puts("right after rowconfig");        
/*
        for(i=0 ; i<numCols; i++){ //nested for loop
            fread(FILE *, calledBytes[i], row->attrArray[i] );
        }
        */
    }
    tableArray->rowArray = rowArray;
    
    return (struct table*) tableArray;
    
}

struct row * rowConfig(FILE * dataFile, int numCols, int ** calledBytes, char ** columnTypes){
  fflush(stdout);
  puts("inside rowconfig");    
 int i;
     struct row * newRow;
     newRow = (struct row*) malloc(sizeof(struct row));
     struct attribute ** newAttribute;
     newAttribute = (struct attribute **) malloc(sizeof(struct attribute*));
     for(i=0; i< numCols; i++){
        newAttribute[i] = (struct attribute*)malloc(sizeof(struct attribute)*numCols);
        newAttribute[i] = attConfig(*calledBytes[i], columnTypes[i]);
        fread(newAttribute[i], *calledBytes[i], 1, dataFile);
      }
     newRow->attrArray = newAttribute;
     return (struct row *)newRow;
}

struct attribute * attConfig(int calledBytes, char *columnTypes){
  fflush(stdout);
  puts("inside attconfig");   
 struct attribute * newAtt;
    newAtt= (struct attribute *) malloc (sizeof(struct attribute));
    strcpy(newAtt->type, columnTypes);
    newAtt->size = calledBytes;
    return (struct attribute *)newAtt;
}
    
